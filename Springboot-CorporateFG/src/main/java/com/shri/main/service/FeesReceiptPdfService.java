package com.shri.main.service;

import com.itextpdf.text.*;
import com.itextpdf.text.pdf.*;
import com.itextpdf.text.pdf.draw.LineSeparator;
import com.shri.main.model.Student;
import com.shri.main.util.EmailUtil;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.io.ClassPathResource;
import org.springframework.stereotype.Service;

import java.io.ByteArrayOutputStream;
import java.time.Instant;
import java.time.ZoneId;
import java.time.format.DateTimeFormatter;

@Service
public class FeesReceiptPdfService {
	
	  @Autowired
	    private EmailUtil emailUtil;

	    public void sendFeesReceiptPdf(Student student) throws Exception {
	        byte[] pdf = generateFeesReceiptManuallyPdf(student);

	        String subject = "FG Infotech - Fees Receipt";
	        String body = "Dear " + student.getName() + ",\n\n"
	                + "We are pleased to inform you that your fees receipt has been generated and is attached to this email.\n\n"
	                + "‚úÖ Total Fees: ‚Çπ" + student.getTotalFees() + "\n"
	                + "‚úÖ Paid Amount: ‚Çπ" + student.getPaidFees() + "\n"
	                + "üí∞ Pending Amount: ‚Çπ" + (student.getTotalFees() - student.getPaidFees()) + "\n\n"
	                + "This receipt has been manually generated by our system for your reference.\n"
	                + "Please retain it for your records.\n\n"
	                + "If you have any questions regarding your payment, please contact our office.\n\n"
	                + "Regards,\n"
	                + "FG Infotech Team\n"
	                + "üìç Website: https://fginfotech.in\n"
	                + "üìû Contact: +91-9511200293";

	        emailUtil.sendFeesReceiptManuallyEmailWithAttachment(
	                student.getEmail(),
	                subject,
	                body,
	                pdf,
	                "Fees_Receipt_" + student.getName().replaceAll(" ", "_") + ".pdf"
	        );
	    }

	    public byte[] generateFeesReceiptManuallyPdf(Student student) throws Exception {
	        ByteArrayOutputStream out = new ByteArrayOutputStream();
	        Document document = new Document(PageSize.A4, 36, 36, 36, 36);
	        PdfWriter writer = PdfWriter.getInstance(document, out);
	        document.open();

	        // === Page Border ===
	        Rectangle border = new Rectangle(document.getPageSize());
	        border.setBorder(Rectangle.BOX);
	        border.setBorderWidth(2f);
	        border.setBorderColor(new BaseColor(0, 102, 204)); // Light blue
	        writer.getDirectContent().rectangle(border);

	        // === Header: Logo Left & FG INFOTECH Right ===
	        PdfPTable headerTable = new PdfPTable(2);
	        headerTable.setWidthPercentage(100);
	        headerTable.setWidths(new int[]{1, 4});
	        headerTable.setSpacingBefore(10f);
	        headerTable.setSpacingAfter(15f);

	        // Logo
	        Image logo = Image.getInstance(new ClassPathResource("static/images/fgimage.jpeg").getURL());
	        logo.scaleToFit(70, 70);
	        PdfPCell logoCell = new PdfPCell(logo, false);
	        logoCell.setBorder(Rectangle.NO_BORDER);
	        logoCell.setHorizontalAlignment(Element.ALIGN_LEFT);
	        logoCell.setPaddingLeft(10f);
	        logoCell.setVerticalAlignment(Element.ALIGN_MIDDLE);
	        headerTable.addCell(logoCell);

	        // FG INFOTECH Text
	        Font fgFont = new Font(Font.FontFamily.HELVETICA, 28, Font.BOLD, new BaseColor(0, 70, 127));
	        PdfPCell textCell = new PdfPCell(new Phrase("FG INFOTECH", fgFont));
	        textCell.setBorder(Rectangle.NO_BORDER);
	        textCell.setHorizontalAlignment(Element.ALIGN_RIGHT);
	        textCell.setVerticalAlignment(Element.ALIGN_MIDDLE);
	        textCell.setPaddingRight(10f);
	        headerTable.addCell(textCell);

	        document.add(headerTable);

	        // === Title Box ===
	        PdfPTable titleTable = new PdfPTable(1);
	        titleTable.setWidthPercentage(100);
	        PdfPCell titleCell = new PdfPCell(new Phrase("FEES RECEIPT",
	                new Font(Font.FontFamily.TIMES_ROMAN, 22, Font.BOLD, BaseColor.WHITE)));
	        titleCell.setHorizontalAlignment(Element.ALIGN_CENTER);
	        titleCell.setBackgroundColor(new BaseColor(0, 102, 204)); // Dark blue
	        titleCell.setPadding(12);
	        titleCell.setBorder(Rectangle.NO_BORDER);
	        titleTable.addCell(titleCell);
	        titleTable.setSpacingAfter(8f);
	        document.add(titleTable);

	        // === Line Separator ===
	        LineSeparator ls = new LineSeparator();
	        ls.setLineColor(new BaseColor(0, 70, 127));
	        document.add(new Chunk(ls));

	        // === Watermark ===
	        PdfContentByte background = writer.getDirectContentUnder();
	        Font watermarkFont = new Font(Font.FontFamily.HELVETICA, 60, Font.BOLD, new BaseColor(200, 200, 200, 50));
	        Phrase watermark = new Phrase("FG INFOTECH", watermarkFont);
	        ColumnText.showTextAligned(background, Element.ALIGN_CENTER, watermark, 297.5f, 421, 45);

	        // === Reg & Receipt Number ===
	        PdfPTable topBox = new PdfPTable(2);
	        topBox.setWidthPercentage(100);
	        topBox.setSpacingBefore(10f);
	        topBox.setWidths(new int[]{1, 1});
	        Font topFont = new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.BOLD, new BaseColor(0, 102, 102));

	        PdfPCell regCell = new PdfPCell(new Phrase("Registration No: 2520700320230021", topFont));
	        regCell.setHorizontalAlignment(Element.ALIGN_LEFT);
	        regCell.setPadding(8);
	        regCell.setBorderColor(BaseColor.LIGHT_GRAY);
	        topBox.addCell(regCell);

	        PdfPCell receiptCell = new PdfPCell(new Phrase("Receipt No: FG-" + student.getId(), topFont));
	        receiptCell.setHorizontalAlignment(Element.ALIGN_RIGHT);
	        receiptCell.setPadding(8);
	        receiptCell.setBorderColor(BaseColor.LIGHT_GRAY);
	        topBox.addCell(receiptCell);

	        document.add(topBox);

	        // === Student Info ===
	        PdfPTable info = new PdfPTable(2);
	        info.setWidthPercentage(100);
	        info.setSpacingBefore(15f);
	        Font infoFont = new Font(Font.FontFamily.HELVETICA, 12);

	        info.addCell(getLabelCell("Name:", infoFont));
	        info.addCell(getValueCell(student.getName(), infoFont));

	        info.addCell(getLabelCell("Batch No:", infoFont));
	        info.addCell(getValueCell(student.getBatchNo(), infoFont));

	        info.addCell(getLabelCell("Admission Date:", infoFont));
	        String formattedDate = new java.text.SimpleDateFormat("dd-MM-yyyy").format(student.getAdmissionDate());
	        info.addCell(getValueCell(formattedDate, infoFont));

	        document.add(info);

	        // === Fee Breakdown Table ===
	        PdfPTable feeTable = new PdfPTable(3);
	        feeTable.setWidthPercentage(100);
	        feeTable.setSpacingBefore(20f);

	        feeTable.addCell(getHeaderCell("Total Fees"));
	        feeTable.addCell(getHeaderCell("Received"));
	        feeTable.addCell(getHeaderCell("Pending"));

	        feeTable.addCell(getCenteredCell("‚Çπ " + String.format("%.2f", student.getTotalFees())));
	        feeTable.addCell(getCenteredCell("‚Çπ " + String.format("%.2f", student.getPaidFees())));
	        feeTable.addCell(getCenteredCell("‚Çπ " + String.format("%.2f", (student.getTotalFees() - student.getPaidFees()))));

	        document.add(feeTable);

	        // === Acknowledgment Note ===
	        Paragraph note = new Paragraph(
	                "We are pleased to confirm that your payment has been successfully received. " +
	                        "This receipt serves as an official acknowledgment of the transaction.\n" +
	                        "For any queries or further assistance, please contact +91 9511200293.",
	                new Font(Font.FontFamily.TIMES_ROMAN, 12));
	        note.setSpacingBefore(25f);
	        document.add(note);

	        // === Issued On ===
	        String issuedDate = DateTimeFormatter.ofPattern("dd-MM-yyyy")
	                .withZone(ZoneId.of("Asia/Kolkata"))
	                .format(Instant.now());
	        Paragraph issued = new Paragraph("Issued On: " + issuedDate,
	                new Font(Font.FontFamily.HELVETICA, 10, Font.ITALIC, BaseColor.DARK_GRAY));
	        issued.setSpacingBefore(10f);
	        document.add(issued);

	        // === Disclaimer / Footer Note ===
	        Paragraph disclaimer = new Paragraph(
	                "Note: This receipt is system-generated and does not require a physical signature.\n" +
	                        "Keep this document for your records. If you notice any discrepancies, please report them immediately.",
	                new Font(Font.FontFamily.HELVETICA, 9, Font.ITALIC, BaseColor.GRAY));
	        disclaimer.setSpacingBefore(10f);
	        disclaimer.setAlignment(Element.ALIGN_CENTER);
	        document.add(disclaimer);

	        // === Signature ===
	        BaseFont signFontBase = BaseFont.createFont("fonts/GreatVibes-Regular.ttf", BaseFont.IDENTITY_H, BaseFont.EMBEDDED);
	        Font signFont = new Font(signFontBase, 20);
	        Paragraph sign = new Paragraph("Shrikant Shinde", signFont);
	        sign.setAlignment(Element.ALIGN_RIGHT);
	        sign.setSpacingBefore(40f);
	        document.add(sign);

	        // === Date/Time ===
	        String dateTime = DateTimeFormatter.ofPattern("dd-MM-yyyy hh:mm a")
	                .withZone(ZoneId.of("Asia/Kolkata"))
	                .format(Instant.now());
	        Paragraph dt = new Paragraph("Date: " + dateTime, new Font(Font.FontFamily.HELVETICA, 10));
	        dt.setAlignment(Element.ALIGN_RIGHT);
	        document.add(dt);

	        // === Footer ===
	        Paragraph footer = new Paragraph();
	        footer.setSpacingBefore(30f);
	        footer.setAlignment(Element.ALIGN_CENTER);
	        footer.add(new Phrase("Thanks & Regards,\n", new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.BOLD)));
	        footer.add(new Phrase("FG Infotech\n", new Font(Font.FontFamily.HELVETICA, 11)));
	        footer.add(new Phrase("Website: https://fginfotech.in",
	                new Font(Font.FontFamily.HELVETICA, 10, Font.UNDERLINE, BaseColor.BLUE)));
	        document.add(footer);

	        document.close();
	        return out.toByteArray();
	    }

	    private PdfPCell getLabelCell(String text, Font font) {
	        PdfPCell cell = new PdfPCell(new Phrase(text, font));
	        cell.setBorder(Rectangle.NO_BORDER);
	        return cell;
	    }

	    private PdfPCell getValueCell(String text, Font font) {
	        PdfPCell cell = new PdfPCell(new Phrase(text, font));
	        cell.setBorder(Rectangle.NO_BORDER);
	        return cell;
	    }

	    private PdfPCell getHeaderCell(String text) {
	        Font headerFont = new Font(Font.FontFamily.HELVETICA, 12, Font.BOLD, BaseColor.WHITE);
	        PdfPCell cell = new PdfPCell(new Phrase(text, headerFont));
	        cell.setBackgroundColor(new BaseColor(0, 102, 204));
	        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
	        cell.setPadding(10);
	        return cell;
	    }

	    private PdfPCell getCenteredCell(String text) {
	        PdfPCell cell = new PdfPCell(new Phrase(text));
	        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
	        cell.setPadding(8);
	        return cell;
	    }


	
    
}
